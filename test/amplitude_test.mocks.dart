// Mocks generated by Mockito 5.4.0 from annotations
// in amplitude_flutter/test/amplitude_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/src/services/binary_messenger.dart' as _i3;
import 'package:flutter/src/services/message_codec.dart' as _i2;
import 'package:flutter/src/services/platform_channel.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMethodCodec_0 extends _i1.SmartFake implements _i2.MethodCodec {
  _FakeMethodCodec_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBinaryMessenger_1 extends _i1.SmartFake
    implements _i3.BinaryMessenger {
  _FakeBinaryMessenger_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i1.Mock implements _i4.MethodChannel {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  _i2.MethodCodec get codec => (super.noSuchMethod(
        Invocation.getter(#codec),
        returnValue: _FakeMethodCodec_0(
          this,
          Invocation.getter(#codec),
        ),
        returnValueForMissingStub: _FakeMethodCodec_0(
          this,
          Invocation.getter(#codec),
        ),
      ) as _i2.MethodCodec);

  @override
  _i3.BinaryMessenger get binaryMessenger => (super.noSuchMethod(
        Invocation.getter(#binaryMessenger),
        returnValue: _FakeBinaryMessenger_1(
          this,
          Invocation.getter(#binaryMessenger),
        ),
        returnValueForMissingStub: _FakeBinaryMessenger_1(
          this,
          Invocation.getter(#binaryMessenger),
        ),
      ) as _i3.BinaryMessenger);

  @override
  _i5.Future<T?> invokeMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i5.Future<T?>.value(),
        returnValueForMissingStub: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  _i5.Future<List<T>?> invokeListMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeListMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i5.Future<List<T>?>.value(),
        returnValueForMissingStub: _i5.Future<List<T>?>.value(),
      ) as _i5.Future<List<T>?>);

  @override
  _i5.Future<Map<K, V>?> invokeMapMethod<K, V>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMapMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i5.Future<Map<K, V>?>.value(),
        returnValueForMissingStub: _i5.Future<Map<K, V>?>.value(),
      ) as _i5.Future<Map<K, V>?>);

  @override
  void setMethodCallHandler(
          _i5.Future<dynamic> Function(_i2.MethodCall)? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setMethodCallHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
}
